import numpy as np
from sklearn.datasets import load_iris
from sklearn.linear_model import Perceptron

import matplotlib.pyplot as plt
from sklearn.datasets import fetch_mldata
from sklearn.neural_network import MLPClassifier


iris = load_iris()
print(iris)
print(iris.data[:3])
print(iris.data[15:18])
print(iris.data[37:40])
x = iris.data[:, (2, 3)]
print(iris.target)
y = (iris.target==0).astype(np.int8)
print(y)
p = Perceptron(random_state=42,max_iter=10,tol=0.001)
p.fit(x, y)

values = [[1.5, 0.1], [1.8, 0.4], [1.3,0.2]]
for value in x:
    pred = p.predict([value])
    print([pred])

x = [[0., 0.], [0., 1.], [1., 0.], [1., 1.]]
y = [0, 0, 0, 1]
clf = MLPClassifier(solver='lbfgs', alpha=1e-5,
                    hidden_layer_sizes=(5, 2), random_state=1)
print(clf.fit(x, y))
print("weights between input and first hidden layer:")
print(clf.coefs_[0])
print("weights between first hidden and second hidden layer:")
print(clf.coefs_[1])
print("w0 = ", clf.coefs_[0][0][0])
print("w1 = ", clf.coefs_[0][1][0])
clf.coefs_[0][:,0]




for i in range(len(clf.coefs_)):
    number_neurons_in_layer = clf.coefs_[i].shape[1]
    for j in range(number_neurons_in_layer):
        weights = clf.coefs_[i][:,j]
        print(i, j, weights, end=", ")
        print()
        plt.scatter(i,j, marker="D")
    print()

    print("Bias values for first hidden layer:")
    print(clf.intercepts_[0])
    print("Bias values for second hidden layer:")
    print(clf.intercepts_[1])


    result = clf.predict([[0, 0], [0, 1],[1, 0], [0, 1],[1, 1], [2., 2.],[1.3, 1.3], [2, 4.8]])
    prob_results = clf.predict_proba([[0, 0], [0, 1],[1, 0], [0, 1],[1, 1], [2., 2.],[1.3, 1.3], [2, 4.8]])
    print(prob_results)


npoints = 50
X, Y = [], []
# class 0
X.append(np.random.uniform(low=-2, high=3, size=(npoints,)) )
Y.append(np.random.uniform(low=-3, high=4, size=(npoints,)))
# class 1
X.append(np.random.uniform(low=-7.2, high=-4.4, size=(npoints,)) )
Y.append(np.random.uniform(low=3, high=6.5, size=(npoints,)))
learnset = []
learnlabels = []
for i in range(2):
    # adding points of class i to learnset
    points = zip(X[i], Y[i])
    for p in points:
        learnset.append(p)
        learnlabels.append(i)
npoints_test = 3 * npoints
TestX = np.random.uniform(low=-8, high=5, size=(npoints_test,))
TestY = np.random.uniform(low=-3, high=10, size=(npoints_test,))
testset = []
points = zip(TestX, TestY)
for p in points:
    testset.append(p)
colours = ["b", "r"]
for i in range(2):
    plt.scatter(X[i], Y[i], c=colours[i])
plt.scatter(TestX, TestY, c="g")
plt.show()


mlp = MLPClassifier(hidden_layer_sizes=(20, 3), max_iter=150, alpha=1e-4,
                    solver='sgd', verbose=10, tol=1e-4, random_state=1,
                    learning_rate_init=.1)
mlp.fit(learnset, learnlabels)
print("Training set score: %f" % mlp.score(learnset, learnlabels))
print("Test set score: %f" % mlp.score(learnset, learnlabels))
mlp.classes_
